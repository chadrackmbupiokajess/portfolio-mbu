# Generated by Django 5.1.5 on 2025-07-29 01:17

import django.db.models.deletion
import django_ckeditor_5.fields
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='About',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(verbose_name='Description')),
                ('photo', models.ImageField(upload_to='about/', verbose_name='Photo de profil')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'À propos',
                'verbose_name_plural': 'À propos',
            },
        ),
        migrations.CreateModel(
            name='AdSenseConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publisher_id', models.CharField(help_text='Votre ID éditeur Google AdSense (ca-pub-xxxxxxxxxx)', max_length=50, verbose_name='Publisher ID')),
                ('is_active', models.BooleanField(default=True, help_text="Activer/désactiver l'affichage des publicités", verbose_name='Activer AdSense')),
                ('test_mode', models.BooleanField(default=False, help_text='Activer le mode test pour les annonces', verbose_name='Mode test')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuration AdSense',
                'verbose_name_plural': 'Configurations AdSense',
            },
        ),
        migrations.CreateModel(
            name='AdUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Nom descriptif pour identifier l'unité publicitaire", max_length=100, verbose_name="Nom de l'unité")),
                ('ad_unit_id', models.CharField(help_text="ID de l'unité publicitaire Google AdSense", max_length=50, verbose_name="ID de l'unité publicitaire")),
                ('ad_type', models.CharField(choices=[('display', 'Display'), ('in_article', 'In-Article'), ('in_feed', 'In-Feed'), ('matched_content', 'Matched Content'), ('auto', 'Auto Ads')], default='display', max_length=20, verbose_name="Type d'annonce")),
                ('ad_size', models.CharField(choices=[('responsive', 'Responsive'), ('728x90', 'Leaderboard (728x90)'), ('300x250', 'Medium Rectangle (300x250)'), ('320x50', 'Mobile Banner (320x50)'), ('160x600', 'Wide Skyscraper (160x600)'), ('300x600', 'Half Page (300x600)'), ('970x250', 'Billboard (970x250)'), ('custom', 'Custom Size')], default='responsive', max_length=20, verbose_name="Taille de l'annonce")),
                ('custom_width', models.PositiveIntegerField(blank=True, help_text='Largeur en pixels (pour taille personnalisée)', null=True, verbose_name='Largeur personnalisée')),
                ('custom_height', models.PositiveIntegerField(blank=True, help_text='Hauteur en pixels (pour taille personnalisée)', null=True, verbose_name='Hauteur personnalisée')),
                ('position', models.CharField(choices=[('header', 'Header'), ('sidebar', 'Sidebar'), ('content_top', 'Top of Content'), ('content_middle', 'Middle of Content'), ('content_bottom', 'Bottom of Content'), ('footer', 'Footer'), ('between_posts', 'Between Posts'), ('popup', 'Popup')], max_length=20, verbose_name='Position')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('show_on_mobile', models.BooleanField(default=True, verbose_name='Afficher sur mobile')),
                ('show_on_desktop', models.BooleanField(default=True, verbose_name='Afficher sur desktop')),
                ('pages_to_show', models.CharField(blank=True, help_text='URLs des pages où afficher cette annonce (séparées par des virgules). Laisser vide pour toutes les pages.', max_length=500, verbose_name='Pages à afficher')),
                ('pages_to_exclude', models.CharField(blank=True, help_text='URLs des pages où ne pas afficher cette annonce (séparées par des virgules)', max_length=500, verbose_name='Pages à exclure')),
                ('custom_css', models.TextField(blank=True, help_text="CSS personnalisé pour styliser l'unité publicitaire", verbose_name='CSS personnalisé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Unité publicitaire',
                'verbose_name_plural': 'Unités publicitaires',
                'ordering': ['position', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_projects', models.PositiveIntegerField(default=0)),
                ('total_blog_posts', models.PositiveIntegerField(default=0)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('total_likes', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Statistiques du portfolio',
                'verbose_name_plural': 'Statistiques du portfolio',
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Titre du CV')),
                ('file', models.FileField(upload_to='resumes/', verbose_name='Fichier CV')),
                ('language', models.CharField(choices=[('fr', 'Français'), ('en', 'English')], default='fr', max_length=10, verbose_name='Langue')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de téléchargements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'CV',
                'verbose_name_plural': 'CVs',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('level', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Compétence',
                'verbose_name_plural': 'Compétences',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(default='#007bff', help_text='Couleur hexadécimale', max_length=7)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('position', models.CharField(max_length=100, verbose_name='Poste')),
                ('company', models.CharField(blank=True, max_length=100, verbose_name='Entreprise')),
                ('message', models.TextField(verbose_name='Témoignage')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='testimonials/', verbose_name='Photo')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=5, verbose_name='Note')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Mis en avant')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Témoignage',
                'verbose_name_plural': 'Témoignages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('link', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Photo de profil')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom complet')),
                ('sex', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin'), ('O', 'Autre')], max_length=1, null=True, verbose_name='Sexe')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Bio')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('civil_status', models.CharField(blank=True, choices=[('S', 'Célibataire'), ('M', 'Marié(e)'), ('D', 'Divorcé(e)'), ('W', 'Veuf/Veuve')], max_length=1, null=True, verbose_name='État civil')),
                ('activities', models.TextField(blank=True, null=True, verbose_name='Activités')),
                ('education_level', models.CharField(blank=True, choices=[('P', 'Primaire'), ('S', 'Secondaire'), ('B', 'Baccalauréat'), ('L', 'Licence'), ('M', 'Master'), ('D', 'Doctorat')], max_length=1, null=True, verbose_name="Niveau d'études")),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Localisation')),
                ('country', django_countries.fields.CountryField(blank=True, default='FR', max_length=2, null=True, verbose_name='Pays')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ville')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field()),
                ('image', models.ImageField(blank=True, null=True, upload_to='projects/')),
                ('project_url', models.URLField(blank=True, null=True, verbose_name='URL du projet')),
                ('github_url', models.URLField(blank=True, null=True, verbose_name='URL GitHub')),
                ('demo_url', models.URLField(blank=True, null=True, verbose_name='URL de démonstration')),
                ('technologies', models.CharField(blank=True, help_text='Technologies utilisées (séparées par des virgules)', max_length=500)),
                ('status', models.CharField(choices=[('en_cours', 'En cours'), ('termine', 'Terminé'), ('pause', 'En pause'), ('archive', 'Archivé')], default='termine', max_length=20)),
                ('featured', models.BooleanField(default=False, verbose_name='Projet mis en avant')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portfolioapp.category')),
                ('user', models.ForeignKey(default='Chadrack Mbu Jess', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='portfolioapp.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Projet',
                'verbose_name_plural': 'Projets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='comment_images/')),
                ('is_edited', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='portfolioapp.comment')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='portfolioapp.project')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='reply_images/')),
                ('is_edited', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_replies', to='portfolioapp.comment')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_replies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Réponse',
                'verbose_name_plural': 'Réponses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('content', django_ckeditor_5.fields.CKEditor5Field()),
                ('excerpt', models.TextField(blank=True, help_text="Résumé de l'article", max_length=300)),
                ('image', models.ImageField(blank=True, null=True, upload_to='blog_images/')),
                ('is_published', models.BooleanField(default=True, verbose_name='Publié')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', models.ManyToManyField(blank=True, to='portfolioapp.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Article de blog',
                'verbose_name_plural': 'Articles de blog',
                'ordering': ['-published_date'],
            },
        ),
        migrations.CreateModel(
            name='AdPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('impressions', models.PositiveIntegerField(default=0, verbose_name='Impressions')),
                ('clicks', models.PositiveIntegerField(default=0, verbose_name='Clics')),
                ('ctr', models.DecimalField(decimal_places=2, default=0.0, help_text='Click-through rate en pourcentage', max_digits=5, verbose_name='CTR (%)')),
                ('revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Revenus ($)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ad_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='portfolioapp.adunit', verbose_name='Unité publicitaire')),
            ],
            options={
                'verbose_name': 'Performance publicitaire',
                'verbose_name_plural': 'Performances publicitaires',
                'ordering': ['-date'],
                'unique_together': {('ad_unit', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ProjectLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='portfolioapp.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Like de projet',
                'verbose_name_plural': 'Likes de projets',
                'unique_together': {('user', 'project')},
            },
        ),
    ]
